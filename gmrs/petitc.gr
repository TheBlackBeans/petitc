@File ::=
  Includes FunctionDeclarations@decls <>;

Includes ::=
  <nil: true>
  INCLUDE Includes <nil: false>;

FunctionDeclarations ::=
  <nil: true>
  FunctionDeclaration@declr FunctionDeclarations@rest <nil: false>;

FunctionDeclaration ::=
  Type@rettype IDENT.0@name LPAR TypedArgs@args RPAR Block@block <>;

Type ::=
  VOID <ty: "void">
  INTTY <ty: "int">
  BOOL <ty: "bool">
  Type@pointed ASTERISK <ty: "pointer">;

TypedArgs ::=
  <nil: true>
  TypedParam@param COMMA TypedArgs@rest <nil: false>;

TypedParam ::=
  Type@type IDENT@name <>;

Int ::=
  INT.0@value <int: "int">
  CHAR.0@value <int: "char">;

Bool ::=
  TRUE <bool: true>
  FALSE <bool: false>;

Expr ::=
  SIZEOF LPAR Type@type RPAR <op: "sizeof">
  IDENT.0@name LPAR Args@args RPAR <op: "call">
  EqualExpr@this <op: "through">;

EqualExpr ::=
  OrExpr@key EQUAL EqualExpr@value <op: "assign">
  OrExpr@this <op: "through">;

OrExpr ::=
  AndExpr@left OR OrExpr@right <op: "or">
  AndExpr@this <op: "through">;

AndExpr ::=
  EqExpr@left AND AndExpr@right <op: "and">
  EqExpr@this <op: "through">;

EqExpr ::=
  CmpExpr@left EQ EqExpr@right <op: "eq">
  CmpExpr@left NEQ EqExpr@right <op: "neq">
  CmpExpr@this <op: "through">;

CmpExpr ::=
  PmExpr@left LT CmpExpr@right <op: "lt">
  PmExpr@left GT CmpExpr@right <op: "gt">
  PmExpr@left GEQ CmpExpr@right <op: "geq">
  PmExpr@left LEQ CmpExpr@right <op: "leq">
  PmExpr@this <op: "through">;

PmExpr ::=
  MdmExpr@left PLUS PmExpr@right <op: "add">
  MdmExpr@left MINUS PmExpr@right <op: "sub">
  MdmExpr@this <op: "through">;

MdmExpr ::=
  UnaryExpr@left ASTERISK MdmExpr@right <op: "mul">
  UnaryExpr@left SLASH MdmExpr@right <op: "div">
  UnaryExpr@left PERCENT MdmExpr@right <op: "mod">
  UnaryExpr@this <op: "through">;

UnaryExpr ::=
  EXCLAM UnaryExpr@value <op: "not">
  PLUSPLUS UnaryExpr@value <op: "incrl">
  UnaryExpr@value PLUSPLUS <op: "incrr">
  MINUSMINUS UnaryExpr@value <op: "decrl">
  UnaryExpr@value MINUSMINUS <op: "decrr">
  AMPERSAND UnaryExpr@value <op: "borrow">
  ASTERISK UnaryExpr@value <op: "deref">
  PLUS UnaryExpr@value <op: "plus">
  MINUS UnaryExpr@value <op: "minus">
  IndexExpr@this <op: "through">;

IndexExpr ::=
  IndexExpr@array LBRACKET Expr@index RBRACKET <op: "index">
  LiteralExpr@this <op: "through">;

LiteralExpr ::=
  Int@value <expr: "int">
  Bool@value <expr: "bool">
  NULL <expr: "null">
  LPAR Expr@this RPAR <op: "par">;

Statement ::=
  SEMICOLON <instr: "none">
  Expr@stmt SEMICOLON <instr: "regular">
  IF LPAR Expr@condition RPAR Instruction@then <instr: "if">
  IF LPAR Expr@condition RPAR Instruction@then ELSE Instruction@else <instr: "ifelse">
  WHILE LPAR Expr@condition RPAR Instruction@stmts <instr: "while">
  FOR LPAR OptDeclVar@init SEMICOLON OptExpr@test SEMICOLON Exprs@step RPAR
    Statement@block <instr: "for">
  Block@stmts <instr: "bloc">
  RETURN SEMICOLON <instr: "ret">
  RETURN Expr@value SEMICOLON <instr: "retval">
  BREAK SEMICOLON <instr: "break">
  CONTINUE SEMICOLON <instr: "continue">;

OptDeclVar ::=
  <none: true>
  DeclVar@decl <none: false>;

OptExpr ::=
  <none: true>
  Expr <none: false>;

Exprs ::=
  <tnil: "none">
  Expr@expr <tnil: "one">
  Expr@expr COMMA Exprs@rest <tnil: "rest">;

Block ::=
  LBRACE DeclStatements@stmts RBRACE <>;

DeclStatements ::=
  <nil: true>
  DeclStatement@dclstmt DeclStatements@rest <nil: false>;

DeclStatement ::=
  VariableDeclaration@declaration <>
  Statement@stmt <>;

VariableDeclaration ::=
  Type@type IDENT.0@name <hasvalue: false>
  Type@type IDENT.0@name EQUAL Expr@value <hasvalue: true>;
